---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";
import { IoSearch } from "react-icons/io5";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
---

<header class="header pt-6">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center text-black md:order-1 md:hidden dark:text-darkmode-text-dark"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center text-black md:order-1 dark:text-darkmode-text-dark"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)" />
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full md:order-1 md:flex md:w-auto"
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer">
                <span class="nav-link inline-flex items-center">
                  {menu.name}
                  <svg class="h-5 w-5 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul class="nav-dropdown-list hidden group-hover:block md:invisible md:absolute md:block md:opacity-0 md:group-hover:visible md:group-hover:opacity-100">
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a href={child.url} class="nav-dropdown-link">
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a href={menu.url} class="nav-link block">
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
    
    <div class="order-1 ml-auto flex md:order-2 md:ml-0">
       <button
    id="dark-toggle"
    type="button"
    class="p-2 rounded text-xl hover:text-primary"
    aria-label="Toggle dark mode"
    title="Toggle dark mode"
  >
    <svg id="dark-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <g class="sun">
      <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" fill="none"/>
      <g stroke="currentColor" stroke-width="2">
        <line x1="12" y1="1" x2="12" y2="3"/>
        <line x1="12" y1="21" x2="12" y2="23"/>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
        <line x1="1" y1="12" x2="3" y2="12"/>
        <line x1="21" y1="12" x2="23" y2="12"/>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
      </g>
    </g>
    <g class="moon" style="display:none">
      <path d="M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z" fill="currentColor"/>
    </g>
  </svg>
  </button>
      <a
        class="mr-4 inline-block cursor-pointer p-2 text-xl text-dark dark:text-darkmode-text-dark transition hover:text-primary md:mr-0"
        href="/search"
        title="search"
        aria-label="search"
      >
        <IoSearch />
      </a>
    </div>
    
  </nav>
</header>
<script>
  // Set initial theme on page load
  function applyThemeFromStorage() {
    const theme = localStorage.theme;
    if (
      theme === 'dark' ||
      (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    updateIcon();
  }

  // Update the icon based on current theme
function updateIcon() {
  const icon = document.getElementById('dark-icon');
  if (!icon) return;
  const sun = icon.querySelector('.sun') as HTMLElement | null;
  const moon = icon.querySelector('.moon') as HTMLElement | null;
  const isDark = document.documentElement.classList.contains('dark');
  if (sun && moon) {
    sun.style.display = isDark ? 'none' : '';
    moon.style.display = isDark ? '' : 'none';
  }
}

  // Toggle theme and save preference
  function toggleTheme() {
    const isDark = document.documentElement.classList.toggle('dark');
    localStorage.theme = isDark ? 'dark' : 'light';
    updateIcon();
  }

  // Setup event listeners after DOM is ready
  window.addEventListener('DOMContentLoaded', () => {
    applyThemeFromStorage();
    const btn = document.getElementById('dark-toggle');
    if (btn) {
      btn.addEventListener('click', toggleTheme);
    }
  });

  // Also update icon if navigating via client-side routing (Astro islands, SPA, etc.)
  document.addEventListener('astro:after-swap', () => {
    applyThemeFromStorage();
    const btn = document.getElementById('dark-toggle');
    if (btn) {
      btn.addEventListener('click', toggleTheme);
    }
  });
</script>